{"version":3,"sources":["components/Meme.jsx","components/Templates.jsx","App.jsx","index.js"],"names":["Meme","meme","setMeme","useState","template_id","id","username","password","boxes","form","setForm","className","src","url","alt","Array","box_count","map","_","index","type","placeholder","onChange","e","newBoxes","text","target","value","onClick","box","fetch","then","res","json","data","success","Templates","templates","template","style","backgroundImage","App","setTemplates","useEffect","memes","console","log","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mMA2CeA,EA1CH,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,KAAOC,EAAW,EAAXA,QACjB,EAAyBC,mBAAS,CAC9BC,YAAYH,EAAKI,GACjBC,SAAS,cACTC,SAAS,kBACTC,MAAQ,KAJZ,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OACI,sBAAKC,UAAU,OAAf,UACI,qBAAKC,IAAKX,EAAKY,IAAKC,IAAI,KACxB,8BAEI,YAAIC,MAAMd,EAAKe,YAAYC,KAAI,SAACC,EAAEC,GAAH,OAC3B,uBAAmBC,KAAK,OAAOC,YAAW,uBAAkBF,EAAM,GAAKG,SAAU,SAACC,GAC9E,IAAMC,EAAWf,EAAKD,MACtBgB,EAASL,GAAS,CAACM,KAAMF,EAAEG,OAAOC,OAClCjB,EAAQ,2BAAID,GAAL,IAAUD,MAAMgB,OAHfL,QAQpB,gCACI,wBAAQS,QA1BE,WAClB,IAAIf,EAAG,4DAAwDJ,EAAKL,YAA7D,qBAAqFK,EAAKH,SAA1F,qBAA+GG,EAAKF,UAC3HE,EAAKD,MAAMS,KAAI,SAACY,EAAIV,GAAL,OACXN,GAAK,UAAF,OAAaM,EAAb,mBAA6BU,EAAIJ,SAExCK,MAAMjB,GAAKkB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAC1BF,MAAK,SAAAG,GACuBrB,GAAR,IAAjBqB,EAAKC,QAAwBlC,EAAKY,IAAUqB,EAAKA,KAAKrB,IACtDX,EAAQ,2BAAID,GAAL,IAAWY,IAAIA,SAkBlB,2BACA,wBAAQe,QAAS,WACb1B,EAAQ,OADZ,oCCnBDkC,EAhBE,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,UAAYnC,EAAW,EAAXA,QAC3B,OACI,8BAEImC,EAAUpB,KAAI,SAAAqB,GAAQ,OACpB,qBAAuB3B,UAAU,WAAWiB,QAAS,WACjD1B,EAAQoC,IADZ,SAGE,qBAAKC,MAAO,CAACC,gBAAgB,OAAD,OAASF,EAASzB,IAAlB,MAA2BF,UAAU,WAHzD2B,EAASjC,UCoBlBoC,MApBf,WACE,MAAmCtC,mBAAS,IAA5C,mBAAOkC,EAAP,KAAmBK,EAAnB,KACA,EAAuBvC,mBAAS,MAAhC,mBAAOF,EAAP,KAAYC,EAAZ,KASA,OARAyC,qBAAU,WACRb,MAAM,qCACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJQ,EAAaR,EAAKA,KAAKU,OACvBC,QAAQC,IAAIZ,EAAKA,KAAKU,YAExB,IAEA,sBAAKjC,UAAU,MAAf,UACE,gDACU,OAATV,EAAgB,cAAC,EAAD,CAAWoC,UAAWA,EAAWnC,QAAWA,IAAc,cAAC,EAAD,CAAMD,KAAOA,EAAMC,QAAWA,QCf/G6C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.b0dd9117.chunk.js","sourcesContent":["import {useState} from 'react';\r\nconst Meme =({meme , setMeme})=>{\r\n    const [form , setForm] = useState({\r\n        template_id:meme.id,\r\n        username:\"AnkitGupta7\",\r\n        password:\"X!BPH@bUA4quy!2\",\r\n        boxes : []\r\n    });\r\n    const generate_meme = ()=>{\r\n        let url = `https://api.imgflip.com/caption_image?template_id=${form.template_id}&username=${form.username}&password=${form.password}`;\r\n        form.boxes.map((box,index)=>(\r\n            url+= `&boxes[${index}][text]=${box.text}`\r\n        ));\r\n        fetch(url).then(res => res.json())\r\n        .then(data => {\r\n            data.success === false ? url=meme.url : url=data.data.url \r\n            setMeme({...meme, url:url})\r\n        })\r\n    }\r\n    return (\r\n        <div className=\"meme\">\r\n            <img src={meme.url} alt=\"\"/>\r\n            <div>\r\n            {\r\n                [...Array(meme.box_count)].map((_,index)=>(\r\n                    <input key={index} type=\"text\" placeholder={`Meme Caption ${index+1}`} onChange={(e)=>{\r\n                        const newBoxes = form.boxes;\r\n                        newBoxes[index] = {text: e.target.value };\r\n                        setForm({...form,boxes:newBoxes});\r\n                    }}/>\r\n                ))\r\n            }\r\n            </div>\r\n            <div>\r\n                <button onClick={generate_meme}>Generate Meme</button>\r\n                <button onClick={()=>{\r\n                    setMeme(null)\r\n                }}>Choose Template</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Meme;","const Templates =({templates , setMeme})=>{\r\n    return (\r\n        <div>\r\n        {\r\n            templates.map(template =>(\r\n              <div key={template.id} className=\"template\" onClick={()=> {\r\n                  setMeme(template)\r\n                  }}>\r\n                <div style={{backgroundImage: `url(${template.url})`}} className=\"image\">\r\n                </div>\r\n              </div>\r\n            ))\r\n          }\r\n      </div>\r\n    )};\r\n\r\nexport default Templates;","import {useState , useEffect} from 'react';\nimport './App.css';\nimport Meme from './components/Meme';\nimport Templates from './components/Templates';\n\nfunction App() {\n  const [templates , setTemplates] = useState([]);\n  const [meme,setMeme] = useState(null);\n  useEffect(()=>{\n    fetch('https://api.imgflip.com/get_memes')\n    .then(res => res.json())\n    .then(data =>{\n      setTemplates(data.data.memes);\n      console.log(data.data.memes);\n    })\n  },[]);\n  return (\n    <div className=\"App\">\n      <h1>Meme Generator</h1>\n      {meme === null ? <Templates templates={templates} setMeme = {setMeme} /> : <Meme meme ={meme} setMeme = {setMeme} /> }\n      \n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}